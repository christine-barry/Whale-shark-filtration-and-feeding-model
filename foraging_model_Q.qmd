---
title: "foraging_model_Q"
format: html
editor: visual
---

## Foraging model

This foraging model is linked to an unpublished research paper on whale shark behaviour at Ningaloo Reef, Western Australia, by C. Barry et al. 2025. We are seeking to understand the minimum required time for a shark to forage to meet net energy = 0. This is an adaption of the model built by Rizzuto et al. 2018. This code will follow the following structure:

**1. Calculate shark mass\
2. Set constants\
3. Standard metabolic rate - adjusted for mass and local temperature\
4. Routine metabolic rate of all swimming\
5. Feeding activity adjustment\
6. Intake rates\
7. Min time calculations\
\
**Code to generate plots and compare the findings to rates of whale shark feeding is available in the matching R code: \
[feeding_model_GIT.R](https://github.com/christine-barry/Whale-shark-filtration-and-feeding-model/blob/main/foraging_model_GIT.R)

Let's begin :)

## 1. calculate shark mass 

Use equation from Hsu et. al 2012 to estimate shark mass from shark total lengths

```{r}

tl <- c(4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0) #shark lengths (tagged)
m <- 12.1 * tl ^ 2.862 # Eqn: Hsu et. al 2012 # kg
M <- m * 1000 # convert to g 

```

## 2. set model constants 

```{r}

b <- 1 # Normalisation constant # let the allometrc scaling shape the relationship # you can specify species but we don't know whale shark 
beta <- 0.84 # scaling exponent SMR Barry 2023 = 0.8406 ± 0.0271 at 15 °C   
temp <- 27.12 # mean temp D'antonio et. al 2024
temp_co <- 2.64 # temp coefficient Q10 # Barry et. al 2023 # 2.64
mult <- 1.459854 #SMR/RMR ratio #Barry et. al 2023
joules_per_kg <- 1357 * 1000  # Convert from joules per gram to joules per kilogram (1357000 J/kg)
assim_eff <- 0.73  # assimilation efficiency correction (j per kg)
cal_conv <- 13.6 # fish caloric equivalent (Kj/g) # Jobling et al. 1993 # per hour 
swim_act <- 0.3391758  # VeDBA non feeding 
feed_act <-  0.3778985 # VeDBA feeding


```

## 3. standard metabolic rate - adjusted for mass and local temperature

```{r}
calc_smr <- function(mass, temp, temp_co, beta) {
  B_15 <- mass^beta # mass to the power of SMR scaling exponent = SMR at 15 deg
  B_temp <- B_15 * temp_co^((temp - 15) / 10) # SMR scaling exponent adjusted scaling temperature coefficient at 27 deg using Q10 model eqn # (temp - temp reference) / 10
  return(B_temp)
}

# run the function 
B_temp <- calc_smr(m, temp, temp_co, beta) # mass and temp adjusted


```

## 4. routine metabolic rate of all swimming 

```{r}

A_swimming <- B_temp * mult  # A_swimming includes SRM + routine activity cost, equivalent to RMR, in mg 02 h-1

# RMR in joules / s / kg
A_s <- A_swimming * cal_conv / 3600 / 1000  # Convert to MO2/h/mg to J/s/kg

```

## 5. Activity adjusted rate of feeding 

```{r}

# feed_act / swim_act
# 1.114167 therefore feeding 11 % increase in metabolic cost when feeding 

A_feeding <- A_swimming * (feed_act / swim_act)  
A_f <- A_feeding * cal_conv / 3600 / 1000  # Convert MO2/h/g to J/s/kg

```

## 6. Intake rates

The intake rates provided here are taken from step 7 in the filtration model code:

[Filtration_model_GIT.R](https://github.com/christine-barry/Whale-shark-filtration-and-feeding-model/blob/main/filtration%20model_GIT.R)\
\
Prey values are allocated under the categories:\
Total - combining active and slow feeding behaviours\
Passive - slow feeding behaviours only (across 3 prey gradients of min, mean, max)\
Active - active feeding behaivours only

```{r}

# function to calculate the intake rate
calc_intake_rate <- function(num_kg,  m, joules_per_kg, assim_eff) {
  kg_h <- num_kg / 24
  kg_sec <- kg_h / 3600
  kgprey_sec_kgshark <- kg_sec / m
  I <- kgprey_sec_kgshark * joules_per_kg * assim_eff
  return(I)
}

#ranges of prey intake (from filtration model output (taken from step 7 in "filtration model" code))
kg_min_tot <-  c(60.91539,  75.80273,  92.17805, 110.01895, 129.30548, 150.01965, 172.14512, 195.66694, 220.57132) # total min 
kg_max_tot <- c(76.87376,  95.66123, 116.32649, 138.84129, 163.18043, 189.32121, 217.24303, 246.92700, 278.35573) # total max 
kg_mean_tot <- c(69.74258,  86.78724, 105.53549, 125.96171, 148.04303, 171.75887, 197.09053, 224.02087, 252.53413) # total mean 
kg_min_pass <- c(1.632913, 2.031987, 2.470948, 2.949196, 3.466195, 4.021465, 4.614566, 5.245097, 5.912691) # passive only min
kg_mean_pass <- c(10.46011, 13.01650, 15.82839, 18.89195, 22.20374, 25.76069, 29.55997, 33.59903, 37.87550) # passive only mean
kg_max_pass <- c(17.59129, 21.89049, 26.61939, 31.77153, 37.34114, 43.32303, 49.71247, 56.50516, 63.69710) # passive only max
kg_act <- c(59.25442,  73.73583,  89.66465, 107.01909, 125.77974, 145.92910, 167.45129, 190.33174, 214.55706) # active only 
I_tot_min <- calc_intake_rate(kg_min_tot, m, joules_per_kg, assim_eff) # tot min
I_tot_max <- calc_intake_rate(kg_max_tot, m, joules_per_kg, assim_eff) # tot max
I_tot_mean <- calc_intake_rate(kg_mean_tot, m, joules_per_kg, assim_eff) # tot mean
I_pass_min <- calc_intake_rate(kg_min_pass, m, joules_per_kg, assim_eff) # pass min 
I_pass_max <- calc_intake_rate(kg_max_pass, m, joules_per_kg, assim_eff) # pass max
I_pass_mean <- calc_intake_rate(kg_mean_pass, m, joules_per_kg, assim_eff) # pass mean
I_act <- calc_intake_rate(kg_act, m, joules_per_kg, assim_eff) # act 

```

## 7. Minimum time calculations 

```{r}

Pa_tot_min <- A_s / (A_s - A_f + I_tot_min)
Pa_tot_max <- A_s / (A_s - A_f + I_tot_max)
Pa_tot_mean <- A_s / (A_s - A_f + I_tot_mean)
Pa_pass_min <- A_s / (A_s - A_f + I_pass_min)
Pa_pass_max <- A_s / (A_s - A_f + I_pass_max)
Pa_pass_mean <- A_s / (A_s - A_f + I_pass_mean)
Pa_act <- A_s / (I_act + A_s - A_f)

dat <- data.frame(tl, Pa_tot_min, Pa_tot_mean, Pa_tot_max, I_tot_min, I_tot_mean, I_tot_max, Pa_pass_max, Pa_pass_mean, Pa_pass_min, Pa_act)
```

##  Model complete :) 

\
